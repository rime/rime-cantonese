name: Build packages

on:
  workflow_call:
    inputs:
      event_name:
        required: true
        type: string

jobs:
  install-schema:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
    - name: Install Schemata
      run: |
        chmod u+x ./.ci/*
        export rime_dir=schema
        ./.ci/install-schema.sh
    - name: Upload Schemata
      uses: actions/upload-artifact@v4
      with:
        name: install-schema
        if-no-files-found: error
        path: schema

  package-windows:
    needs: install-schema
    runs-on: windows-2019
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
    - name: Get Weasel Version
      shell: bash
      run: |
        echo "WEASEL_VERSION=$(git ls-remote --tags --refs --sort="v:refname" https://github.com/rime/weasel.git | grep -v '/latest$' | tail -n1 | sed 's/.*\///')" >> $GITHUB_ENV
    - id: check_version
      name: Compare Weasel Version
      if: inputs.event_name != 'push'
      shell: bash
      continue-on-error: true
      run: |
        RELEASED_FILES=$(gh release view latest --json assets --jq '.assets[].name')
        WEASEL_RELEASED_VERSION=$(echo "$RELEASED_FILES" | grep 'weasel-.*' | sed 's/weasel-\([^-]*\).*/\1/')
        if [ "$WEASEL_VERSION" = "$WEASEL_RELEASED_VERSION" ]; then
          echo "Weasel version is up to date. Skipping package."
          exit 1
    - name: Download Schemata
      if: inputs.event_name == 'push' || steps.check_version.outcome == 'success'
      uses: actions/download-artifact@v4
      with:
        name: install-schema
        path: schema
    - name: Package Weasel
      if: inputs.event_name == 'push' || steps.check_version.outcome == 'success'
      shell: bash
      run: |
        export PATH="/c/msys64/usr/bin:$PATH"  # wget
        export SCHEMA_DIR="$PWD/schema"
        ./.ci/package-windows.sh
    - name: Upload Artifact
      if: inputs.event_name == 'push' || steps.check_version.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: package-windows
        if-no-files-found: error
        path: ./output/archives/weasel-*.exe

  package-mac:
    needs: install-schema
    runs-on: macos-14
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
    - name: Get Squirrel Version
      run: |
        echo "SQUIRREL_VERSION=$(git ls-remote --tags --refs --sort="v:refname" https://github.com/rime/squirrel.git | grep -v '/latest$' | tail -n1 | sed 's/.*\///')" >> $GITHUB_ENV
    - id: check_version
      name: Compare Squirrel Version
      if: inputs.event_name != 'push'
      continue-on-error: true
      run: |
        RELEASED_FILES=$(gh release view latest --json assets --jq '.assets[].name')
        SQUIRREL_RELEASED_VERSION=$(echo "$RELEASED_FILES" | grep 'Squirrel-.*' | sed 's/Squirrel-\([^-]*\).*/\1/')
        if [ "$SQUIRREL_VERSION" = "$SQUIRREL_RELEASED_VERSION" ]; then
          echo "Squirrel version is up to date. Skipping package."
          exit 1
    - name: Download Schemata
      if: inputs.event_name == 'push' || steps.check_version.outcome == 'success'
      uses: actions/download-artifact@v4
      with:
        name: install-schema
        path: schema
    - name: Package Squirrel
      if: inputs.event_name == 'push' || steps.check_version.outcome == 'success'
      env:
        APPLE_DEVELOPER_NAME: ${{ secrets.APPLE_DEVELOPER_NAME }}
        APPLE_DEVELOPER_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
        APPLE_CONNECT_USERNAME: ${{ secrets.APPLE_CONNECT_USERNAME }}
        APPLE_CONNECT_PASSWORD: ${{ secrets.APPLE_CONNECT_PASSWORD }}
        APPLICATION_CERTIFICATE: ${{ secrets.APPLICATION_CERTIFICATE }}
        APPLICATION_CERTIFICATE_PASSWORD: ${{ secrets.APPLICATION_CERTIFICATE_PASSWORD }}
        INSTALLER_CERTIFICATE: ${{ secrets.INSTALLER_CERTIFICATE }}
        INSTALLER_CERTIFICATE_PASSWORD: ${{ secrets.INSTALLER_CERTIFICATE_PASSWORD }}
      run: |
        chmod u+x ./.ci/*

        KEYCHAIN_PATH=~/Library/Keychains/squirrel.keychain
        KEYCHAIN_PASSWORD=squirrel
        security create-keychain -p "$KEYCHAIN_PASSWORD" squirrel.keychain

        echo "$APPLICATION_CERTIFICATE" | base64 -d > application_certificate.p12
        security import application_certificate.p12 -k "$KEYCHAIN_PATH" -P "$APPLICATION_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        echo "$INSTALLER_CERTIFICATE" | base64 -d > installer_certificate.p12
        security import installer_certificate.p12 -k "$KEYCHAIN_PATH" -P "$INSTALLER_CERTIFICATE_PASSWORD" -T /usr/bin/productsign

        security list-keychain -s "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-key-partition-list -S apple-tool:,apple:,codesign:,productsign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

        export SCHEMA_DIR="$PWD/schema"
        ./.ci/package-mac.sh
    - name: Upload Artifact
      if: inputs.event_name == 'push' || steps.check_version.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: package-mac
        if-no-files-found: error
        path: ./output/Squirrel-*.pkg
